stages:
  - test          
  - build
  - package
  - deploy

variables:
  APP_VERSION: $CI_PIPELINE_IID

test:
  stage: test
  script:
    - chmod +x ./setup_env.sh
    - ./setup_env.sh
    - cat config.js

build-job:
  stage: build
  image: node:latest
  script:
    - echo "BUILDING"
    - npm install
    - echo "Build complete."

package-docker:
  stage: package
  image: docker:20.10.20
  services:
    - docker:20.10.20-dind
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build . -t $CI_REGISTRY_IMAGE:$APP_VERSION
    - docker image ls
    - docker push $CI_REGISTRY_IMAGE:$APP_VERSION

deploy-to-prod:
  image: 
    name: amazon/aws-cli:2.4.11
    entrypoint: [""]
  stage: deploy
  variables:
    APP_NAME: swing-bot
    APP_ENV_NAME: Swingbot-env
  script:
    - aws --version
    - yum install -y gettext
    - export DEPLOY_TOKEN=$(echo $GITLAB_DEPLOY_TOKEN | tr -d "/n" | base64)
    - envsubst < auths/Dockerrun.aws.json > Dockerrun.aws.json
    - envsubst < auths/auth.json > auth.json
    - cat Dockerrun.aws.json
    - cat auth.json
    - aws s3 cp Dockerrun.aws.json s3://$AWS_S3_BUCKET/Dockerrun.aws.json
    - aws s3 cp auth.json s3://$AWS_S3_BUCKET/auth.json
    - aws elasticbeanstalk create-application-version --application-name "$APP_NAME" --version-label "$APP_VERSION" --source-bundle S3Bucket=$AWS_S3_BUCKET,S3Key=Dockerrun.aws.json
    - aws elasticbeanstalk update-environment --application-name "$APP_NAME" --version-label "$APP_VERSION" --environment-name "$APP_ENV_NAME"